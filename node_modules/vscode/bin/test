#!/usr/bin/env node

const path = require('path');
const cp = require('child_process');
const fs = require('fs');

const downloadAndUnzipVSCode = require('vscode-test').downloadAndUnzipVSCode;

const version = process.env.CODE_VERSION || '*';
const isInsiders = version === 'insiders';

const testRunFolder = path.join('.vscode-test', isInsiders ? 'insiders' : 'stable');
const testRunFolderAbsolute = path.join(process.cwd(), testRunFolder);

let windowsExecutable;
let darwinExecutable;
let linuxExecutable;

if (isInsiders) {
    windowsExecutable = path.join(testRunFolderAbsolute, 'Code - Insiders.exe');
    darwinExecutable = path.join(testRunFolderAbsolute, 'Visual Studio Code - Insiders.app', 'Contents', 'MacOS', 'Electron');
    linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'code-insiders');
} else {
    windowsExecutable = path.join(testRunFolderAbsolute, 'Code.exe');
    darwinExecutable = path.join(testRunFolderAbsolute, 'Visual Studio Code.app', 'Contents', 'MacOS', 'Electron');
    linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'code');
    if (['0.10.1', '0.10.2', '0.10.3', '0.10.4', '0.10.5', '0.10.6', '0.10.7', '0.10.8', '0.10.9'].indexOf(version) >= 0) {
        linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'Code');
    }
}

var testsFolder;
if (process.env.CODE_TESTS_PATH) {
    testsFolder = process.env.CODE_TESTS_PATH;
} else if (fs.existsSync(path.join(process.cwd(), 'out', 'test'))) {
    testsFolder = path.join(process.cwd(), 'out', 'test'); // TS extension
} else {
    testsFolder = path.join(process.cwd(), 'test'); // JS extension
}

var testsWorkspace = process.env.CODE_TESTS_WORKSPACE || testsFolder;
var extensionsFolder = process.env.CODE_EXTENSIONS_PATH || process.cwd();
var locale = process.env.CODE_LOCALE || 'en';
var userDataDir = process.env.CODE_TESTS_DATA_DIR;
var executable = (process.platform === 'darwin') ? darwinExecutable : process.platform === 'win32' ? windowsExecutable : linuxExecutable;

console.log('### VS Code Extension Test Run ###');
console.log('Current working directory: ' + process.cwd());

function runTests() {
    var args = [
        testsWorkspace,
        '--extensionDevelopmentPath=' + extensionsFolder,
        '--extensionTestsPath=' + testsFolder,
        '--locale=' + locale,
    ];

    if (userDataDir) {
        args.push('--user-data-dir=' + userDataDir);
    }

    if (process.env.CODE_DISABLE_EXTENSIONS) {
        args.push('--disable-extensions');
    }

    console.log('Running extension tests: ' + [executable, args.join(' ')].join(' '));

    var cmd = cp.spawn(executable, args);

    cmd.stdout.on('data', function (data) {
        console.log(data.toString());
    });

    cmd.stderr.on('data', function (data) {
        console.error(data.toString());
    });

    cmd.on('error', function (data) {
        console.log('Failed to execute tests: ' + data.toString());
    });

    cmd.on('close', function (code) {
        console.log('Tests exited with code: ' + code);

        if (code !== 0) {
            process.exit(code); // propagate exit code to outer runner
        }
    });
}

function downloadExecutableAndRunTests() {
    console.log('Downloading VS Code into "' + testRunFolderAbsolute);

    downloadAndUnzipVSCode().then(executablePath => {
        executable = executablePath
        runTests()
    })
}

fs.exists(executable, function (exists) {
    if (exists) {
        runTests();
    } else {
        downloadExecutableAndRunTests();
    }
});